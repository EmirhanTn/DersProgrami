@page
@model DersProgrami.Areas.Identity.Pages.Account.RegisterModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Kayıt Ol";
    // Handler için sabit (net) URL; Areas ile karışmasın diye absolute path:
    var depUrl = Url.Content("~/Identity/Account/Register?handler=Departments");
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-6">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Input.ReturnUrl" />

            <!-- Email -->
            <div class="mb-3">
                <label asp-for="Input.Email" class="form-label">Email</label>
                <input asp-for="Input.Email" class="form-control" autocomplete="username" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>

            <!-- Password -->
            <div class="mb-3">
                <label asp-for="Input.Password" class="form-label">Password</label>
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" />
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>

            <!-- Confirm -->
            <div class="mb-3">
                <label asp-for="Input.ConfirmPassword" class="form-label">Parolayı Doğrula</label>
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>

            <!-- Full name -->
            <div class="mb-3">
                <label asp-for="Input.FullName" class="form-label">Ad Soyad</label>
                <input asp-for="Input.FullName" class="form-control" />
                <span asp-validation-for="Input.FullName" class="text-danger"></span>
            </div>

            <!-- Faculty -->
            <div class="mb-3">
                <label asp-for="Input.FacultyId" class="form-label">Fakülte</label>
                <select asp-for="Input.FacultyId"
                        asp-items="Model.FacultyOptions"
                        class="form-select"
                        id="FacultyId">
                    <option value="">Seçiniz</option>
                </select>
                <span asp-validation-for="Input.FacultyId" class="text-danger"></span>
            </div>

            <!-- Department (cascades) -->
            <div class="mb-3">
                <label asp-for="Input.DepartmentId" class="form-label">Bölüm</label>
                <select asp-for="Input.DepartmentId"
                        asp-items="Model.DepartmentOptions"
                        class="form-select"
                        id="DepartmentId">
                    <option value="">Seçiniz</option>
                </select>
                <span asp-validation-for="Input.DepartmentId" class="text-danger"></span>
            </div>

            <div class="form-text mb-3">
                Kaydınız oluşturulacak ve <strong>Admin onayı</strong> sonrasında aktif edilecektir.
            </div>

            <button type="submit" class="btn btn-primary">Kayıt Ol</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const fac = document.getElementById('FacultyId');
            const dep = document.getElementById('DepartmentId');
            const url = '@depUrl'; // /Identity/Account/Register?handler=Departments

            async function loadDepartments(fid, selected) {
                dep.innerHTML = '<option value="">Seçiniz</option>';
                if (!fid) return;

                try {
                    const res = await fetch(`${url}&facultyId=${encodeURIComponent(fid)}`);
                    if (!res.ok) {
                        console.error('Departments fetch failed', res.status);
                        return;
                    }
                    const list = await res.json();
                    list.forEach(x => {
                        const opt = document.createElement('option');
                        opt.value = x.departmentId;
                        opt.textContent = x.name;
                        if (selected && Number(selected) === Number(x.departmentId)) {
                            opt.selected = true;
                        }
                        dep.appendChild(opt);
                    });
                } catch (e) {
                    console.error('Departments fetch error', e);
                }
            }

            // Fakülte değişince bölümleri getir
            fac.addEventListener('change', () => loadDepartments(fac.value, null));

            // Sayfa validasyon hatasıyla geri dönerse seçili fakülteye uygun bölümleri yükle
            if (fac.value && dep.options.length <= 1) {
                loadDepartments(fac.value, dep.value);
            }
        })();
    </script>
}
