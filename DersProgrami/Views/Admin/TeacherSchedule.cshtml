@using DersProgrami.Models
@model List<ScheduleViewModel>

@{
    var teacher = (Teacher)ViewBag.Teacher;
    ViewData["Title"] = $"Ders Programı - {teacher.FullName}";
    string RangeLabel(int h) => $"{h:00}:00 - {h + 1:00}:00";
    var days = new[] { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday };
}

<h2>@ViewData["Title"]</h2>
<p><strong>@teacher.Department.Faculty.Name</strong> / @teacher.Department.Name</p>

<table class="table table-bordered align-middle timetable">
    <thead>
        <tr>
            <th style="width:130px;">Saat</th>
            <th>Pazartesi</th>
            <th>Salı</th>
            <th>Çarşamba</th>
            <th>Perşembe</th>
            <th>Cuma</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Model)
        {
            <tr>
                <td><strong>@RangeLabel(row.Hour)</strong></td>
                @foreach (var d in days)
                {
                    var sid = row.ScheduleIds.ContainsKey(d) ? row.ScheduleIds[d] : null;
                    var html = row.Lessons.GetValueOrDefault(d);
                    bool hasRecord = sid.HasValue;

                    <td class="slot-cell">
                        @if (!hasRecord)
                        {
                            <div class="d-flex justify-content-center">
                                <button class="btn btn-sm btn-primary add-btn"
                                        data-tid="@teacher.TeacherId" data-day="@d" data-hour="@row.Hour">
                                    Ders Ekle
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="slot">
                                <div class="slot-meta">@Html.Raw(html)</div>
                                <div class="btn-group btn-group-sm flex-shrink-0">
                                    <button class="btn btn-outline-secondary edit-btn"
                                            data-tid="@teacher.TeacherId" data-day="@d" data-hour="@row.Hour">
                                        Düzenle
                                    </button>
                                    <button class="btn btn-outline-danger delete-btn"
                                            data-tid="@teacher.TeacherId" data-scid="@sid">
                                        Sil
                                    </button>
                                </div>
                            </div>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="admModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ders</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="admModalBody"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
         const modal = new bootstrap.Modal(document.getElementById('admModal'));
         const body  = document.getElementById('admModalBody');

         document.querySelectorAll('.add-btn').forEach(b => b.addEventListener('click', async () => {
            const q = `teacherId=${b.dataset.tid}&day=${b.dataset.day}&hour=${b.dataset.hour}`;
            const res = await fetch(`/Admin/AddFormAdmin?${q}`);
            body.innerHTML = await res.text();
            wireUp('#addScheduleFormAdmin');
            modal.show();
         }));

         document.querySelectorAll('.edit-btn').forEach(b => b.addEventListener('click', async () => {
            const q = `teacherId=${b.dataset.tid}&day=${b.dataset.day}&hour=${b.dataset.hour}`;
            const res = await fetch(`/Admin/EditFormAdmin?${q}`);
            body.innerHTML = await res.text();
            wireUp('#editScheduleFormAdmin');
            modal.show();
         }));

         document.querySelectorAll('.delete-btn').forEach(b => b.addEventListener('click', async () => {
            if (!confirm('Silinsin mi?')) return;
            const tokenEl = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenEl ? tokenEl.value : '';
            const fd = new FormData();
            fd.append('scheduleId', b.dataset.scid);
            fd.append('teacherId', b.dataset.tid);
            const res = await fetch('/Admin/DeleteScheduleAdmin', {
                method: 'POST', body: fd, headers: token ? { 'RequestVerificationToken': token } : {}
            });
            if (res.ok) location.reload(); else alert(await res.text());
         }));

         function wireUp(formSel){
            const f = document.querySelector(formSel + ' #FacultyId');
            const d = document.querySelector(formSel + ' #DepartmentId');
            const l = document.querySelector(formSel + ' #LessonId');
            const form = document.querySelector(formSel);
            if (!form) return;

            if (f){
                f.addEventListener('change', async ()=>{
                    d.innerHTML = '<option value="">Seçiniz</option>';
                    l.innerHTML = '<option value="">Seçiniz</option>';
                    if(!f.value) return;
                    const items = await (await fetch(`/Admin/DepByFac?facultyId=${f.value}`)).json();
                    items.forEach(x => d.insertAdjacentHTML('beforeend', `<option value="${x.departmentId}">${x.name}</option>`));
                });
            }
            if (d){
                d.addEventListener('change', async ()=>{
                    l.innerHTML = '<option value="">Seçiniz</option>';
                    if(!d.value) return;
                    const items = await (await fetch(`/Admin/LessonsByDep?departmentId=${d.value}`)).json();
                    items.forEach(x => l.insertAdjacentHTML('beforeend', `<option value="${x.lessonId}">${x.code} - ${x.lessonName}</option>`));
                });
            }

            form.addEventListener('submit', async (e)=>{
                e.preventDefault();
                const fd = new FormData(form);
                const url = form.id === 'editScheduleFormAdmin' ? '/Admin/UpdateScheduleAdmin' : '/Admin/AddScheduleAdmin';
                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;
                const res = await fetch(url, { method:'POST', body: fd, headers:{ 'RequestVerificationToken': token }});
                if (res.ok) location.reload(); else alert(await res.text());
            });
        }
    </script>

    <style>
        table.timetable {
            table-layout: fixed;
            width: 100%;
        }

        th, td {
            vertical-align: top;
        }
        .slot-cell {
            padding: .5rem .6rem;
            overflow: hidden;
        }

        .slot {
            display: grid;
            grid-template-columns: 1fr max-content; 
            column-gap: .5rem;
            align-items: start;
            min-height: 88px;
        }

        .slot-meta {
            min-width: 0;
        }
            .slot-meta .title {
                font-weight: 600;
                margin-bottom: .15rem;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis; 
            }

            .slot-meta .sub {
                color: #6c757d;
                font-size: .9rem;
                line-height: 1.25;
                display: -webkit-box; 
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
                overflow: hidden;
            }

        .slot .btn-group {
            white-space: nowrap;
        }

            .slot .btn-group .btn {
                padding: .2rem .5rem;
            }

        .add-btn {
            min-width: 96px;
        }
    </style>


}
