@using System
@using DersProgrami.Models
@model List<ScheduleViewModel>

<style>
    .slot-cell {
        position: relative;
        padding: .5rem .6rem;
        overflow: hidden;
        min-height: 94px;
    }

    .time-cell {
        width: 150px;
        white-space: nowrap;
    }

    .slot-meta {
        transition: filter .2s ease-in-out, opacity .2s ease-in-out;
    }

    .slot-actions {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        gap: 6px;
        opacity: 0;
        pointer-events: none;
        transition: opacity .2s ease-in-out;
        z-index: 2;
    }

        .slot-actions .btn {
            padding: .4rem .8rem;
            font-size: .9rem;
        }


    .slot-cell:hover .slot-meta {
        filter: blur(2px); 
        opacity: 0.4; 
    }

    .slot-cell:hover .slot-actions {
        opacity: 1;
        pointer-events: auto;
    }
</style>

@if (ViewBag.Message is string msg && !string.IsNullOrWhiteSpace(msg))
{
    <div class="alert alert-warning">@msg</div>
}

@{
    ViewData["Title"] = "Ders Programı";
    string RangeLabel(int hour) => $"{hour:00}:00 - {hour + 1:00}:00";
    var days = new[] { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday };
}

<h2>@ViewData["Title"]</h2>

<div class="mb-3">
    <a class="btn btn-success btn-sm" asp-controller="Teacher" asp-action="ExportExcel">
        Excel’e Aktar
    </a>
</div>

<table class="table table-bordered align-middle">
    <thead>
        <tr>
            <th class="time-cell">Saat</th>
            <th>Pazartesi</th>
            <th>Salı</th>
            <th>Çarşamba</th>
            <th>Perşembe</th>
            <th>Cuma</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in Model)
        {
            <tr>
                <td class="time-cell"><strong>@RangeLabel(row.Hour)</strong></td>

                @foreach (var d in days)
                {
                    var text = row.Lessons.GetValueOrDefault(d);
                    <td class="slot-cell">
                        @if (string.IsNullOrWhiteSpace(text))
                        {
                            <div class="d-flex justify-content-center">
                                <button type="button"
                                        class="btn btn-primary btn-sm add-btn"
                                        data-day="@d" data-hour="@row.Hour">
                                    Ders Ekle
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="slot">
                                <div class="slot-meta">
                                    @Html.Raw(text) 
                                </div>
                            </div>
                            <div class="btn-group btn-group-sm slot-actions">
                                <button type="button" class="btn btn-outline-secondary edit-btn"
                                        data-day="@d" data-hour="@row.Hour">
                                    Düzenle
                                </button>
                                <button type="button" class="btn btn-outline-danger delete-btn"
                                        data-day="@d" data-hour="@row.Hour">
                                    Sil
                                </button>
                            </div>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>


<div class="modal fade" id="addModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ders</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body" id="addModalBody"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const addModal = new bootstrap.Modal(document.getElementById('addModal'));

     
        document.querySelectorAll('.add-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            const day = btn.dataset.day, hour = btn.dataset.hour;
            const res = await fetch(`/Teacher/AddForm?day=${day}&hour=${hour}`);
            document.getElementById('addModalBody').innerHTML = await res.text();
            wireUpCascades('#addScheduleForm');
            addModal.show();
          });
        });

        // EDIT
        document.querySelectorAll('.edit-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            const day = btn.dataset.day, hour = btn.dataset.hour;
            const res = await fetch(`/Teacher/EditForm?day=${day}&hour=${hour}`);
            document.getElementById('addModalBody').innerHTML = await res.text();
            wireUpCascades('#editScheduleForm');
            addModal.show();
          });
        });

        // DELETE
        document.querySelectorAll('.delete-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            if (!confirm('Bu dersi silmek istiyor musunuz?')) return;

            const resForm = await fetch(`/Teacher/EditForm?day=${btn.dataset.day}&hour=${btn.dataset.hour}`);
            const html = await resForm.text();
            const temp = document.createElement('div');
            temp.innerHTML = html;
            const idInput = temp.querySelector('input[name="ScheduleId"]');
            if (!idInput) { alert('Kayıt bulunamadı.'); return; }

            const form = new FormData();
            form.append('scheduleId', idInput.value);
            const token = temp.querySelector('input[name="__RequestVerificationToken"]').value;

            const res = await fetch('/Teacher/DeleteSchedule', {
              method: 'POST',
              body: form,
              headers: {
                'RequestVerificationToken': token,
                'X-Requested-With': 'XMLHttpRequest'  
              }
            });
            if (res.ok) location.reload();
            else alert(await res.text());
          });
        });

        function wireUpCascades(formSelector) {
          const root = document.querySelector(formSelector);
          const fSel = root.querySelector('#FacultyId');
          const dSel = root.querySelector('#DepartmentId');
          const lSel = root.querySelector('#LessonId');

          async function loadDepartments() {
            dSel.innerHTML = '<option value="">Seçiniz</option>';
            lSel.innerHTML = '<option value="">Seçiniz</option>';
            if (!fSel || !fSel.value) return;
            const r = await fetch(`/Teacher/DepartmentsByFaculty?facultyId=${fSel.value}`);
            (await r.json()).forEach(x => dSel.insertAdjacentHTML('beforeend',
              `<option value="${x.departmentId}">${x.name}</option>`));
            if (dSel.dataset.selected) { dSel.value = dSel.dataset.selected; await loadLessons(); }
          }

          async function loadLessons() {
            lSel.innerHTML = '<option value="">Seçiniz</option>';
            if (!dSel || !dSel.value) return;
            const r = await fetch(`/Teacher/LessonsByDepartment?departmentId=${dSel.value}`);
            (await r.json()).forEach(x => lSel.insertAdjacentHTML('beforeend',
              `<option value="${x.lessonId}">${x.code} - ${x.lessonName}</option>`));
            if (lSel.dataset.selected) lSel.value = lSel.dataset.selected;
          }

          if (fSel) fSel.addEventListener('change', loadDepartments);
          if (dSel) dSel.addEventListener('change', loadLessons);

          if (fSel && !fSel.value) {
            const first = fSel.querySelector('option[value]:not([value=""])');
            if (first) fSel.value = first.value;
          }
          if (fSel && fSel.value) loadDepartments();

          // SUBMIT 
          root.addEventListener('submit', async (e) => {
            e.preventDefault();
            const fd = new FormData(root);
            const url = root.id === 'editScheduleForm' ? '/Teacher/UpdateSchedule' : '/Teacher/AddSchedule';
            const res = await fetch(url, {
              method: 'POST',
              body: fd,
              headers: {
                'RequestVerificationToken': root.querySelector('input[name="__RequestVerificationToken"]').value,
                'X-Requested-With': 'XMLHttpRequest'  
              }
            });
            if (res.ok) location.reload();
            else alert(await res.text());
          });
        }
    </script>
}
